System.register(["./utils"], function (exports_1, context_1) {
    "use strict";
    var __moduleName = context_1 && context_1.id;
    var utils_1;
    return {
        setters: [
            function (utils_1_1) {
                utils_1 = utils_1_1;
            }
        ],
        execute: function () {
            // override Function.prototype.toString to make zone.js patched function
            // look like native function
            Zone.__load_patch('toString', function (global, Zone, api) {
                // patch Func.prototype.toString to let them look like native
                var originalFunctionToString = Function.prototype.toString;
                Function.prototype.toString = function () {
                    if (typeof this === 'function') {
                        if (this[utils_1.zoneSymbol('OriginalDelegate')]) {
                            return originalFunctionToString.apply(this[utils_1.zoneSymbol('OriginalDelegate')], arguments);
                        }
                        if (this === Promise) {
                            var nativePromise = global[utils_1.zoneSymbol('Promise')];
                            if (nativePromise) {
                                return originalFunctionToString.apply(nativePromise, arguments);
                            }
                        }
                        if (this === Error) {
                            var nativeError = global[utils_1.zoneSymbol('Error')];
                            if (nativeError) {
                                return originalFunctionToString.apply(nativeError, arguments);
                            }
                        }
                    }
                    return originalFunctionToString.apply(this, arguments);
                };
                // patch Object.prototype.toString to let them look like native
                var originalObjectToString = Object.prototype.toString;
                Object.prototype.toString = function () {
                    if (this instanceof Promise) {
                        return '[object Promise]';
                    }
                    return originalObjectToString.apply(this, arguments);
                };
            });
        }
    };
});
