/*
 * Copyright 2016 Palantir Technologies, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
System.register(["fs", "glob", "js-yaml", "path"], function (exports_1, context_1) {
    "use strict";
    var __moduleName = context_1 && context_1.id;
    /**
     * Based off a rule's metadata, generates a string Jekyll "HTML" file
     * that only consists of a YAML front matter block.
     */
    function generateRuleFile(metadata) {
        var yamlData = {};
        // TODO: Use Object.assign when Node 0.12 support is dropped (#1181)
        for (var _i = 0, _a = Object.keys(metadata); _i < _a.length; _i++) {
            var key = _a[_i];
            yamlData[key] = metadata[key];
        }
        yamlData.optionsJSON = JSON.stringify(metadata.options, undefined, 2);
        yamlData.layout = "rule";
        yamlData.title = "Rule: " + metadata.ruleName;
        return "---\n" + yaml.safeDump(yamlData, { lineWidth: 140 }) + "---";
    }
    var fs, glob, yaml, path, DOCS_DIR, DOCS_RULE_DIR, rulePaths, rulesJson, fileData;
    return {
        setters: [
            function (fs_1) {
                fs = fs_1;
            },
            function (glob_1) {
                glob = glob_1;
            },
            function (yaml_1) {
                yaml = yaml_1;
            },
            function (path_1) {
                path = path_1;
            }
        ],
        execute: function () {/*
             * Copyright 2016 Palantir Technologies, Inc.
             *
             * Licensed under the Apache License, Version 2.0 (the "License");
             * you may not use this file except in compliance with the License.
             * You may obtain a copy of the License at
             *
             *     http://www.apache.org/licenses/LICENSE-2.0
             *
             * Unless required by applicable law or agreed to in writing, software
             * distributed under the License is distributed on an "AS IS" BASIS,
             * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
             * See the License for the specific language governing permissions and
             * limitations under the License.
             */
            DOCS_DIR = "../docs";
            DOCS_RULE_DIR = path.join(DOCS_DIR, "rules");
            rulePaths = glob.sync("../lib/rules/*Rule.js");
            rulesJson = [];
            for (var _i = 0, rulePaths_1 = rulePaths; _i < rulePaths_1.length; _i++) {
                var rulePath = rulePaths_1[_i];
                // tslint:disable-next-line:no-var-requires
                var ruleModule = require(rulePath);
                var Rule = ruleModule.Rule;
                if (Rule != null && Rule.metadata != null) {
                    var metadata = Rule.metadata;
                    var fileData_1 = generateRuleFile(metadata);
                    var fileDirectory = path.join(DOCS_RULE_DIR, metadata.ruleName);
                    // write file for each specific rule
                    if (!fs.existsSync(fileDirectory)) {
                        fs.mkdirSync(fileDirectory);
                    }
                    fs.writeFileSync(path.join(fileDirectory, "index.html"), fileData_1);
                    rulesJson.push(metadata);
                }
            }
            // write overall data file, this is used to generate the index page for the rules
            fileData = JSON.stringify(rulesJson, undefined, 2);
            fs.writeFileSync(path.join(DOCS_DIR, "_data", "rules.json"), fileData);
        }
    };
});
